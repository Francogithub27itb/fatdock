ARG BASE_CONTAINER
FROM $BASE_CONTAINER

ARG DATA_SCIENCE
ARG DEVOPS

ARG java_version
ARG java_provider
ARG python_major_version
ARG language

ARG SCALA3_VER
ARG AMMONITE_VER
ARG NPM_VER
ARG CODESERVER_VER
ARG DOCKER_VERSION
ARG DOCKER_COMPOSE_VERSION
ARG MONGO_VER
ARG MODELIO_VER
ARG TURBOVNC_VERSION
ARG RSTUDIO_VERSION

ARG JAVA_KERNEL
ARG KOTLIN_KERNEL
ARG SCALA_KERNEL
ARG TSLABS_KERNEL
ARG BASH_KERNEL
ARG ANSIBLE_KERNEL
ARG PHP_KERNEL
ARG XFCE4
ARG BRAVE
ARG SELENIUM
ARG IDEA
ARG PG
ARG MYSQL
ARG MONGO
ARG JETTY
ARG JENKINS
ARG MODELIO
ARG PORTAINER
ARG TURBOVNC
ARG TIGERVNC
ARG SPICE
ARG JUPYTERBOOK
ARG NBGRADER
ARG HEROKU
ARG GCP
ARG NETWORK_TOOLS
ARG SONARQUBE

USER $NB_USER

ARG ijava_version=1.3.0

ENV \
    IJAVA_VERSION=$ijava_version \
    CONDA_BASE_PATH=/opt/conda \
    DOMAIN=pluralcamp.com \
    PYTHON_VERSION_MAJOR=$python_major_version \
    LANG="${language}.UTF-8" \
    LC_CTYPE="${language}.UTF-8" \
    LC_ALL="${language}.UTF-8" \
    LANGUAGE="${language}:ca" \      
    REMOVE_DASH_LINECOMMENT=true \
    SHELL=/bin/bash \
    HOME="/home/$NB_USER" \
    USER="${NB_USER}" \
    USER_GID="${NB_GID}" \
    XDG_CACHE_HOME="${HOME}/.cache/" \
    XDG_RUNTIME_DIR="/tmp" \
    DISPLAY=":1" \
    TERM="xterm" \
    DEBIAN_FRONTEND="noninteractive" \
    RESOURCES_PATH="/resources" \
    SSL_RESOURCES_PATH="/resources/ssl" \
    WORKSPACE_HOME="${HOME}" \
    JUPYTER_ENABLE_LAB=yes \
    PATH=/opt/conda/bin:${PATH} \
    SDKMAN_DIR="/opt/apps/sdkman" \
    NOTEBOOK_ARGS="--notebook-dir=/home/$NB_USER --no-browser --NotebookApp.password='sha1:c4f869f064af:98fd6cb811e7e05beb33167b272554336c712f14'"

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Layer cleanup script
COPY resources/scripts/clean-layer.sh resources/scripts/fix-permissions.sh /usr/bin/

USER root

RUN \
    chmod a+rwx /usr/bin/clean-layer.sh && \
    chmod a+rwx /usr/bin/fix-permissions.sh && \
    mkdir -p $RESOURCES_PATH && chmod a+rwx $RESOURCES_PATH && \
    mkdir -p $WORKSPACE_HOME && chmod a+rwx $WORKSPACE_HOME && \
    mkdir -p $SSL_RESOURCES_PATH && chmod a+rwx $SSL_RESOURCES_PATH && \
    clean-layer.sh
#    mamba install conda-build -y \
#    && clean-layer.sh

RUN apt-get update && \
    apt-get install -y locales && \
    echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    if [ "${language}" != "en_US" ]; then \
        echo "${language}.UTF-8 UTF-8" >> /etc/locale.gen; \
    fi && \
    locale-gen && \
    dpkg-reconfigure --frontend=noninteractive locales && \
    if [ "$language" != "en_US" ]; then \
        update-locale LANG="${language}.UTF-8"; \
    else \
        update-locale LANG="en_US.UTF-8"; \
    fi \
    && apt update && apt upgrade -y \
    && clean-layer.sh


### BASICS START ###
COPY resources/scripts/install-basics-*.sh resources/scripts/install-ssh.sh /usr/bin/
RUN \
    chmod a+rwx /usr/bin/install-basics-1.sh && \
    install-basics-1.sh && \
    chmod a+rwx /usr/bin/install-basics-2.sh && \
    install-basics-2.sh && \
    chmod a+rwx /usr/bin/install-ssh.sh && \
    install-ssh.sh && \
    # Fix permissions
    fix-permissions.sh $HOME && \
    # Cleanup
    clean-layer.sh

### BASICS END ###


WORKDIR $HOME


### RUNTIMES ###

# There is nothing added yet to LD_LIBRARY_PATH, so we can overwrite
ENV \
	CONDA_ROOT=$CONDA_BASE_PATH \
	LD_LIBRARY_PATH=$CONDA_ROOT/lib \
	PATH=$RESOURCES_PATH/.pyenv/shims:$RESOURCES_PATH/.pyenv/bin:$PATH \
	PYENV_ROOT=$RESOURCES_PATH/.pyenv \
	PATH=/opt/node/bin:$PATH

COPY resources/scripts/install-pyenv.sh resources/scripts/install-pipx.sh resources/scripts/install-node.sh /usr/bin/

# Install pyenv to allow dynamic creation of python versions
# Install pipx, node
RUN \
    chmod a+rwx /usr/bin/install-pyenv.sh && \
    install-pyenv.sh && \   
    # Install pipx
    chmod a+rwx /usr/bin/install-pipx.sh && \
    install-pipx.sh && \
    # install node.js
    chmod a+rwx /usr/bin/install-node.sh && \
    install-node.sh && \
    # Cleanup
    clean-layer.sh

## Java and Scala
ENV SCALA3_VER=${SCALA3_VER} \
    JAVA_VERSION=${java_version} \
    JAVA_PROVIDER=${java_provider}
COPY resources/scripts/install-java-scala.sh  /usr/bin/install-java-scala.sh
RUN \
    chmod a+rwx /usr/bin/install-java-scala.sh && \
    install-java-scala.sh && \
    # Cleanup
    clean-layer.sh
    
### END RUNTIMES ###

### DOCKER START ###

# Adding docker
ENV DEBIAN_FRONTEND=noninteractive \
    DOCKER_CHANNEL=stable \
    DOCKER_VERSION=${DOCKER_VERSION} \
    DOCKER_COMPOSE_VERSION=${DOCKER_COMPOSE_VERSION} \
    DEBUG=false

# Docker installation
COPY resources/scripts/install-docker.sh  /usr/bin/install-docker.sh
RUN \
        chmod a+rwx /usr/bin/install-docker.sh && \
        install-docker.sh && \
        clean-layer.sh

VOLUME /var/lib/docker

### DOCKER END ####


## fix permissions
RUN chown $NB_USER:$NB_GID -R $HOME && \
apt update && \
apt-get install -y fuse && \
apt-get install -y kmod && \
clean-layer.sh



### GUI TOOLS ###

# Add the defaults from /lib/x86_64-linux-gnu, otherwise lots of no version errors
# cannot be added above otherwise there are errors in the installation of the gui tools
# Call order: https://unix.stackexchange.com/questions/367600/what-is-the-order-that-linuxs-dynamic-linker-searches-paths-in

ENV LD_LIBRARY_PATH=/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:$CONDA_ROOT/lib

# Install xfce4 & gui tools (chrome included)
COPY resources/scripts/install-gui.sh resources/scripts/install-brave.sh /usr/bin/
RUN \
    chmod a+rwx /usr/bin/install-gui.sh && \
    install-gui.sh && \
    if [[ $BRAVE == "true" ]]; then \
        chmod a+rwx /usr/bin/install-brave.sh; \
        install-brave.sh ; \
    fi \
    # Cleanup
    && clean-layer.sh

### GUI Tools END ####


### TOOLS START ####

## VNC 
COPY resources/tools/t*vnc.sh $RESOURCES_PATH/tools/
ENV TURBOVNC_VERSION=${TURBOVNC_VERSION}
RUN \
    if [ "$TIGERVNC" == "true" ]; then \
        chmod +x $RESOURCES_PATH/tools/tigervnc.sh ;\
        /bin/bash $RESOURCES_PATH/tools/tigervnc.sh ;\
    fi && \
    if [ "$TURBOVNC" == "true" ]; then \
        chmod +x $RESOURCES_PATH/tools/turbovnc.sh ;\
        /bin/bash $RESOURCES_PATH/tools/turbovnc.sh ;\
    fi && \
    #Spice agent
    if [ "$SPICE" == "true" ]; then \
        apt update ;\
        apt install -y spice-vdagent \
	software-properties-common \
	xserver-xspice x11-xserver-utils ;\
    fi \
    # Cleanup
    && clean-layer.sh

## Install Git LFS
## and ungit -- latest
COPY resources/tools/ungit.sh resources/tools/git-lfs.sh resources/tools/selenium.sh resources/tools/google-drive.sh $RESOURCES_PATH/tools/
RUN \
    chmod +x $RESOURCES_PATH/tools/ungit.sh && \
    /bin/bash $RESOURCES_PATH/tools/ungit.sh && \    
    chmod +x $RESOURCES_PATH/tools/git-lfs.sh && \
    /bin/bash $RESOURCES_PATH/tools/git-lfs.sh && \
    #Install selenium
    chmod +x $RESOURCES_PATH/tools/selenium.sh && \
    /bin/bash $RESOURCES_PATH/tools/selenium.sh && \
    #google-drive-ocamlfuse 
    chmod +x $RESOURCES_PATH/tools/google-drive.sh && \
    /bin/bash $RESOURCES_PATH/tools/google-drive.sh && \
    # Cleanup
    clean-layer.sh

### install-github-cli
COPY resources/scripts/install-github-cli.sh  /usr/bin/install-github-cli.sh
ARG GITHUB=true
RUN \
    if [[ $GITHUB == "true" ]]; then \
        chmod a+rwx /usr/bin/install-github-cli.sh; \
        install-github-cli.sh ; \
    fi && \
    #install newman
    npm install -g newman && \
    clean-layer.sh

### TOOLS END ###



#### KERNELS START ####

COPY resources/ikernels $RESOURCES_PATH/ikernels/

ENV \
	NPM_PAKAGES_SYS_DIR=$CONDA_BASE_PATH/share/npm-packages \
	PATH=$PATH:$CONDA_BASE_PATH/share/npm-packages/bin \
	COURSIER_CACHE=/opt/conda/share/coursier/cache

## java kernel start ##

COPY resources/config/ijava $RESOURCES_PATH/config/ijava/

RUN \
    if [[ "$JAVA_KERNEL" == "true" ]]; then \
        chmod +x $RESOURCES_PATH/ikernels/java-kernel.sh ;\
        /bin/bash $RESOURCES_PATH/ikernels/java-kernel.sh ;\
    fi && \
    ## javascript and typescript start ##
    if [[ "$TSLABS_KERNEL" == "true" ]]; then \
        chmod +x $RESOURCES_PATH/ikernels/tslabs-kernel.sh ;\
        /bin/bash $RESOURCES_PATH/ikernels/tslabs-kernel.sh ;\
    fi && \
    #PHP kernel
    if [[ "$PHP_KERNEL" == "true" ]]; then \
        chmod +x $RESOURCES_PATH/ikernels/php-kernel.sh ;\
        /bin/bash $RESOURCES_PATH/ikernels/php-kernel.sh ;\
    fi && \
    clean-layer.sh


## Kotlin start ##

#USER $NB_UID
RUN \
    if [[ "$KOTLIN_KERNEL" == "true" ]]; then \
        mamba install -y -n base -c jetbrains kotlin-jupyter-kernel; \ 
    fi && \
    #bash start
    if [[ "$BASH_KERNEL" == "true" ]]; then \
        pip install calysto_bash ; \
    fi && \
    #scala almond start 
    #Ammonite here. Almond kernel: see ahead near the end of this Dockerfile
    if [[ ! -z "$AMMONITE_VER" ]]; then \ 
        sh -c '(echo "#!/usr/bin/env sh" && curl -L https://github.com/com-lihaoyi/Ammonite/releases/download/${AMMONITE_VER}/3.1-${AMMONITE_VER}) > /usr/local/bin/amm && chmod +x /usr/local/bin/amm'; \   
    fi && \
    ## Scala kernel via almond
    if [[ "$SCALA_KERNEL" == "true" ]]; then \
        chmod +x $RESOURCES_PATH/ikernels/scala-kernel.sh ;\
        /bin/bash $RESOURCES_PATH/ikernels/scala-kernel.sh ;\
    fi && \
    clean-layer.sh

## scala almond end ##

## Ansible install but no ansible-kernel
RUN \
    #ansible start
    if [[ "$ANSIBLE_KERNEL" == "true" ]]; then \
        /opt/conda/bin/mamba install -n base --yes -c conda-forge ansible ansible-runner ansible-lint ; \
    fi && \
    clean-layer.sh


### KERNELS END ###

### IDEs ###

## VS Code Server: https://github.com/codercom/code-server -- latest
ENV CODESERVER_VER=${CODESERVER_VER}
COPY resources/ides/vs-code-server.sh $RESOURCES_PATH/ides/vs-code-server.sh
RUN \
    chmod +x $RESOURCES_PATH/ides/vs-code-server.sh && \
    /bin/bash $RESOURCES_PATH/ides/vs-code-server.sh && \
    # Cleanup
    clean-layer.sh

### IDEs END ###

#### DBs ####
# /resources/dbs and /resources/docker
COPY resources/dbs $RESOURCES_PATH/dbs
COPY resources/docker $RESOURCES_PATH/docker

RUN \
    if [ "$PG" == "true" ]; then \
        chmod +x $RESOURCES_PATH/dbs/postgres/pg-install.sh ;\
        /bin/bash $RESOURCES_PATH/dbs/postgres/pg-install.sh ;\
    fi && \
    #mysql start
    if [ "$MYSQL" == "true" ]; then \
        chmod +x $RESOURCES_PATH/dbs/mysql/mysql-install.sh ;\
        /bin/bash $RESOURCES_PATH/dbs/mysql/mysql-install.sh ;\
        chmod +x $RESOURCES_PATH/dbs/mysql-workbench/mysql-workbench-install.sh ;\
        /bin/bash $RESOURCES_PATH/dbs/mysql-workbench/mysql-workbench-install.sh ;\
    fi && \
    if [ "$MONGO" == "true" ]; then \
        chmod +x $RESOURCES_PATH/dbs/mongodb/mongo-install.sh ;\
        /bin/bash $RESOURCES_PATH/dbs/mongodb/mongo-install.sh ${MONGO_VER} ;\
    fi \
    # Cleanup
    && clean-layer.sh

#### DBs END ####



### MISC APPS START ####

## Copy other apps scripts
COPY resources/apps/ $RESOURCES_PATH/apps/

## Jetty 10 Start
COPY resources/examples/jsp-servlet/examples.tar.gz $RESOURCES_PATH/examples/jsp-servlet/examples.tar.gz

### Dependencies for Modelio
ENV MODELIO_VER=${MODELIO_VER}
COPY ./resources/config/modelio.config $RESOURCES_PATH/config/

## SonarQube start
COPY resources/config/sonar.properties $RESOURCES_PATH/config/

### install-gcloud-cli
COPY resources/scripts/install-gcloud-cli.sh  /usr/bin/install-gcloud-cli.sh

### install network tools (whireshark, traceroute...)
COPY resources/scripts/install-network-tools.sh  /usr/bin/install-network-tools.sh

RUN \
    if [ "$JETTY" == "true" ]; then \
        chmod +x $RESOURCES_PATH/apps/jetty/jetty-install.sh ;\
        /bin/bash $RESOURCES_PATH/apps/jetty/jetty-install.sh ;\
    fi && \
    if [ "$JENKINS" == "true" ]; then \
        chmod +x $RESOURCES_PATH/apps/jenkins/jenkins-install.sh ;\
        /bin/bash $RESOURCES_PATH/apps/jenkins/jenkins-install.sh ;\
    fi && \
    # modelio dependencies
    if [ "$MODELIO" == "true" ]; then \
        chmod +x $RESOURCES_PATH/apps/modelio/modelio-dependencies.sh ;\
        /bin/bash $RESOURCES_PATH/apps/modelio/modelio-dependencies.sh ;\
    fi && \    
    if [ "$PORTAINER" == "true" ]; then \
        chmod +x $RESOURCES_PATH/apps/portainer/portainer-install.sh ;\
        /bin/bash $RESOURCES_PATH/apps/portainer/portainer-install.sh ;\
    fi && \
    if [ "$SONARQUBE" == "true" ]; then \
        chmod +x $RESOURCES_PATH/apps/sonarqube/sonar-install.sh ;\
        /bin/bash $RESOURCES_PATH/apps/sonarqube/sonar-install.sh ;\
    fi && \
    if [[ $GCP == "true" ]]; then \
        chmod a+rwx /usr/bin/install-gcloud-cli.sh; \
        install-gcloud-cli.sh ; \
    fi && \
    if [[ $NETWORK_TOOLS == "true" ]]; then \
        chmod a+rwx /usr/bin/install-network-tools.sh; \
        install-network-tools.sh ; \
    fi \
    # Cleanup
    && clean-layer.sh

### MISC APPS END ####



### JUPYTER EXTENSIONS START ###

## Jupyter remote Desktop proxy

RUN pip install jupyter-remote-desktop-proxy && \
jupyter server extension enable jupyter_remote_desktop_proxy && \
mamba install -c conda-forge websockify -y	


## jupyterbook

RUN \
  if [[ "$JUPYTERBOOK" == true ]]; then \
    mamba install -c conda-forge --yes jupyter-book streamlit ; \
    pip install jupyterquiz jupytercards ; \
    #pip install git+https://github.com/wjbmattingly/quiz-generator.git; \
    pip uninstall --yes docutils ; \
    pip install "docutils==0.20" ;\
  fi \
    && clean-layer.sh
#

## Other extensions

COPY ./resources/jupyter-extensions/install-basic-jupyter-extensions.sh ./resources/jupyter-extensions/install-additional-jupyter-extensions.sh $RESOURCES_PATH/jupyter-extensions/

RUN \
    chmod +x $RESOURCES_PATH/jupyter-extensions/install-basic-jupyter-extensions.sh && \
    /bin/bash $RESOURCES_PATH/jupyter-extensions/install-basic-jupyter-extensions.sh && \
    # Cleanup
    clean-layer.sh
#

RUN \
    if [ "$DATA_SCIENCE" == "true" ]; then \
        chmod +x $RESOURCES_PATH/jupyter-extensions/install-additional-jupyter-extensions.sh ;\
        /bin/bash $RESOURCES_PATH/jupyter-extensions/install-additional-jupyter-extensions.sh ;\
    fi \
    # Cleanup
    && clean-layer.sh

### JUPYTER EXTENSIONS END ####




### DS BIO START ###

COPY ./resources/scripts/install-bio-r.sh ./resources/scripts/install-db-drivers-data-science.sh ./resources/scripts/install-db-drivers.sh  $RESOURCES_PATH/scripts/

ENV \ 
	RSVERSION=$RSTUDIO_VERSION \
	RSESSION_PROXY_RSTUDIO_1_4=true

COPY ./resources/ides/rstudio/install-rstudio*.sh $RESOURCES_PATH/ides/rstudio/

RUN \
    if [ "$DATA_SCIENCE" == "true" ]; then \
        ## bio and r libraries ; \
        chmod +x $RESOURCES_PATH/scripts/install-bio-r.sh;\
        /bin/bash $RESOURCES_PATH/scripts/install-bio-r.sh ;\
        ## R Studio ; \
        chmod +x $RESOURCES_PATH/ides/rstudio/install-rstudio.sh ;\
        /bin/bash $RESOURCES_PATH/ides/rstudio/install-rstudio.sh $NB_USER ;\
        ## DB drivers for python (data science) ; \
        chmod +x $RESOURCES_PATH/scripts/install-db-drivers-data-science.sh;\
        /bin/bash $RESOURCES_PATH/scripts/install-db-drivers-data-science.sh ;\        
    else \
        ## DB drivers for python ; \
        chmod +x $RESOURCES_PATH/scripts/install-db-drivers.sh;\
        /bin/bash $RESOURCES_PATH/scripts/install-db-drivers.sh ;\        
    fi \
    # Cleanup
    && clean-layer.sh
#

### DS BIO END ###



### NBGRADER START ###

COPY ./resources/jupyter-extensions/install-nbgrader.sh $RESOURCES_PATH/jupyter-extensions/
COPY ./resources/nbgrader $RESOURCES_PATH/nbgrader/
RUN \
    if [ "$NBGRADER" == "false" ]; then \
        chmod +x $RESOURCES_PATH/jupyter-extensions/install-nbgrader.sh ; \
        /bin/bash $RESOURCES_PATH/jupyter-extensions/install-nbgrader.sh ; \
    fi \
    # Cleanup
    && clean-layer.sh
#

### NBGRADER END ###



### REBUMPS START ###

## sshfs 
RUN apt update && apt install -y sshfs && \
    sed -i "s/#PermitUserEnvironment no/PermitUserEnvironment yes/g" /etc/ssh/sshd_config && \
    sed -i "s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g" /etc/ssh/sshd_config && \
    mkdir -p /home/godrive && chown $NB_USER:$NB_GID /home/godrive && \
    clean-layer.sh
## sshfs and ansible remake end


### Firefox for Ubuntu >= 22.04

COPY resources/scripts/install-firefox.sh  /usr/bin/install-firefox.sh
ARG FIREFOX=true
RUN \
    if [[ $FIREFOX == "true" ]]; then \
        chmod a+rwx /usr/bin/install-firefox.sh; \
        install-firefox.sh ; \
    fi \
    # Cleanup
    && clean-layer.sh

### Firefox end


### Setting passwd for NB_USER and root
RUN \
    echo "${NB_USER}:pluralcamp" | chpasswd && \
    echo "root:pluralcamp" | chpasswd 


RUN \
    if [ "$DATA_SCIENCE" == "true" ]; then \
        ## R Studio Proxy ; \
        chmod +x $RESOURCES_PATH/ides/rstudio/install-rstudio-proxy.sh ;\
        /bin/bash $RESOURCES_PATH/ides/rstudio/install-rstudio-proxy.sh $NB_USER ;\
    fi \
    # Cleanup
    && clean-layer.sh

### REBUMPS END ###



### CONFIGURATIONS START ###

COPY ./resources $RESOURCES_PATH/

## Adding nbTranslate config
# nbTranslate default configuration to catalan
#RUN \
#    chmod +x $RESOURCES_PATH/scripts/set-nbTranslate-config.sh && \
#    $RESOURCES_PATH/scripts/set-nbTranslate-config.sh && \
#    SYS_EXTENSIONS_DIR=/opt/conda/share/jupyter/nbextensions && \
#    sed -i "s/'fr'/'ca'/g" $SYS_EXTENSIONS_DIR/nbTranslate/main.js


## jupyter customizations
RUN \
    chmod +x $RESOURCES_PATH/scripts/set-jupyter-config.sh && \
    $RESOURCES_PATH/scripts/set-jupyter-config.sh && \
    chmod +x $RESOURCES_PATH/scripts/*.sh && \
    chmod +x /usr/bin/*.sh && \
    /usr/bin/jpy-customize.sh && \
#/usr/bin/terminal-customize.sh && \
# Directory for apps installed by user && \
 mkdir -p /opt/apps && \
 chown $NB_USER:$NB_GID /opt/apps && \
 ln -s /opt/apps /home/$NB_USER/.apps && \
# icons for jupyter-server-proxy && \
 mkdir -p /etc/jupyter/icons

COPY ./resources/icons/* /etc/jupyter/icons/


# Classic notebook customization
# COPY resources/config/custom.css $RESOURCES_PATH/config/


## Jupyter Server Proxy config:
ARG CONFIG_NB_FILE=/etc/jupyter/jupyter_server_config.py
COPY ./proxy-server.entorn-io.py /tmp/
RUN cat /tmp/proxy-server.entorn-io.py >> $CONFIG_NB_FILE && \
    ## upgrade and clean
    apt update && \ 
    ## apt upgrade -y && \
    clean-layer.sh


# fuse allow_others
COPY resources/config/fuse.conf /etc/fuse.conf

## User configs:
# COPY resources/config/.bashrc resources/config/.profile /home/$NB_USER/

RUN \
    chmod +x $RESOURCES_PATH/scripts/set-user-config.sh && \
    $RESOURCES_PATH/scripts/set-user-config.sh && \    
    mkdir -p /home/$NB_USER/.docker && \
    chown $NB_USER:$NB_GID -R /home/$NB_USER/.gitconfig \
    /home/$NB_USER/.bashrc \
    /home/$NB_USER/.docker && \
    rm -rf /home/$NB_USER/work


## videochat config:
# COPY resources/config/videochat/jupyter_server_config.json /etc/jupyter/jupyter_server_config.json


## Adding bootstrap hooks
# COPY ./resources/bin-hooks/start-custom.sh /usr/local/bin/start-notebook.d/
# COPY ./resources/bin-hooks/before-custom.sh /usr/local/bin/before-notebook.d/


## Adding user bootstrap hooks
# COPY resources/bin-user-hooks $RESOURCES_PATH/bin-user-hooks


## Adding scripts
# COPY resources/bin-user-instructor $RESOURCES_PATH/bin-user-instructor
# COPY resources/bin-user-student $RESOURCES_PATH/bin-user-student
RUN \
    chmod +x $RESOURCES_PATH/scripts/set-videochat-config.sh && \
    $RESOURCES_PATH/scripts/set-videochat-config.sh && \
    chmod +x $RESOURCES_PATH/scripts/set-bootstrap-hooks.sh && \
    $RESOURCES_PATH/scripts/set-bootstrap-hooks.sh && \
    chmod +x $RESOURCES_PATH/scripts/add-apps-install-scripts.sh && \
    $RESOURCES_PATH/scripts/add-apps-install-scripts.sh && \
/bin/bash -c '\
function make_exec() { \
  files=$(shopt -s nullglob dotglob; echo $1/*); \
  if (( ${#files} )); \
  then \
  chmod +x $1/*; \
  fi \
} && \
make_exec $RESOURCES_PATH/bin-user-hooks && \
make_exec $RESOURCES_PATH/bin-user-instructor && \
make_exec $RESOURCES_PATH/bin-user-student && \
make_exec /usr/local/bin/start-notebook.d && \
make_exec /usr/local/bin/before-notebook.d'


## Adding apps install sripts to $PATH
## See $RESOURCES_PATH/scripts/add-apps-install-scripts.sh

### CONFIGURATIONS END ###

ENV \
    IDEA=$IDEA \
    PG=$PG \
    MYSQL=$MYSQL \
    MONGO=$MONGO \
    MONGO_VER=$MONGO_VER \
    JETTY=$JETTY \
    DEVOPS=$DEVOPS \
    DATA_SCIENCE=$DATA_SCIENCE

# Adding sample dbs

# COPY ./resources/sampledb $RESOURCES_PATH/sampledb
# COPY ./resources/config/xfce4 $RESOURCES_PATH/config/xfce4/

COPY ./resources/images/mountains.jpg /usr/share/backgrounds/xfce/xfce-verticals.png

COPY ./resources/apps/brave-browser/brave-browser.desktop /usr/share/applications/brave-browser.desktop 

COPY ./resources/apps/google-chrome/google-chrome.desktop /usr/share/applications/google-chrome.desktop

COPY ./resources/jupyter-remote-desktop/setup_websockify.py  /opt/conda/lib/python3.11/site-packages/jupyter_remote_desktop_proxy/setup_websockify.py

COPY ./resources/jupyter-remote-desktop/index.css  /opt/conda/lib/python3.11/site-packages/jupyter_remote_desktop_proxy/static/dist/index.css

#RUN mamba install -c conda-forge jupyterlab==4.2.3 -y
RUN fix-permissions.sh $CONDA_BASE_PATH

RUN \
pip install langchain_anthropic langchain_openai langchain_cohere langchain_google_genai langchain_mistralai langchain_nvidia_ai_endpoints && \
clean-layer.sh
